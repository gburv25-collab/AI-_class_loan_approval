Code: Train a PD Model and Make Approval Decisions
# Python (scikit-learn) - Logistic Regression for Credit Risk (PD)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score, average_precision_score, confusion_matrix, classification_report
from sklearn.utils.class_weight import compute_class_weight
df = pd.read_csv("loan_applications.csv")
target_col = "default_12m"
categorical = ["purpose", "home_ownership", "channel", "region", "loan_term_months"]
numeric = ["age", "annual_income", "employment_length", "credit_score", "debt_to_income",
          "num_open_accounts", "delinquencies_2y", "inquiries_6m", "loan_amount", "interest_rate"]
X = df[categorical + numeric]
y = df[target_col].astype(int)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)
# Class weights for imbalance
classes = np.array([0,1])
cw = compute_class_weight("balanced", classes=classes, y=y_train)
cw_dict = {cls:w for cls,w in zip(classes, cw)}
preprocess = ColumnTransformer([
   ("num", StandardScaler(), numeric),
   ("cat", OneHotEncoder(handle_unknown="ignore"), categorical),
])
lr = LogisticRegression(max_iter=2000, class_weight=cw_dict, solver="lbfgs")
pipe = Pipeline([("prep", preprocess), ("model", lr)])
pipe.fit(X_train, y_train)
# Evaluate
y_proba = pipe.predict_proba(X_test)[:,1]
print("ROC-AUC:", roc_auc_score(y_test, y_proba))
print("PR-AUC :", average_precision_score(y_test, y_proba))
# Policy: approve if PD < 0.08
pd_cutoff = 0.08
y_pred_policy = (y_proba >= pd_cutoff).astype(int)  # 1 = predict default (reject)
print("Confusion Matrix (reject=1 at cutoff 0.08):\n", confusion_matrix(y_test, y_pred_policy))
print(classification_report(y_test, y_pred_policy, digits=3))
